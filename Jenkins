 node {
def version = 'test'
def imageName = 'test'
def finalImageName = 'test'
def gradleFilePath ='';
def tag = 'test';
def app
  
 stage('Checkout from Github') {

  git branch: '${BranchName}',credentialsId:'f1c5ff59-c542-4205-a661-10e4af5b0c5f',url:'https://github.com/ekaplus/push-notification-server.git'

    }
	
	  stage('Get Version  & Image Name'){
  
    if (isUnix()) {
        dir("${gradleFilePath}") {
       version = sh returnStdout: true, script: "grep -iR '^version' gradle.properties | awk -F = '{print \$2 }'"
	   version = version.replaceAll("[\r\n]+","");
        echo "version is   -> ${version}"
        
        imageName = sh returnStdout: true, script: "grep -iR '^image_name' gradle.properties | awk -F = '{print \$2 }'"
		imageName = imageName.replaceAll("[\r\n]+","");
        echo "imageName is   -> ${imageName}"
		finalImageName = "${imageName}";
		 echo "Final Image Name is   -> ${finalImageName}"
		 
		 tag = "${version}_${BranchName}";
		 echo "Final Tag Name is   -> ${tag}"

        }
        
    } 
  }
  

   stage('Gradle Build') {
    if (isUnix()) {
        dir("${gradleFilePath}") {
             revision = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%H'").trim()
            sh "gradle clean build -x test -Drevision=$revision bootJar"
	    sh "gradle publish 2>/dev/null || true"
           
        }
    } 
}

 stage('Remove existing Images if exists'){ 
     if (isUnix()) {
        
      sh '''
          echo  Removing image [ '''+finalImageName+''':latest ] if exists.
          docker image rm  -f '''+finalImageName+''':latest 2>/dev/null || true
           echo Removing image [ '''+finalImageName+''':'''+tag+''' ] if exists.
           docker image rm  -f '''+finalImageName+''':'''+tag+''' 2>/dev/null || true
          '''
          
         }
   }

stage('Build API Image') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */
      dir("${gradleFilePath}")  {
       
        sh '''
		docker build -f DockerFile -t 192.168.1.225:50000/'''+finalImageName+''':'''+tag+''' --build-arg version='''+version+''' --build-arg ENABLE_JACOCO='''+ENABLE_JACOCO+''' .
       '''
      }
    }

stage('Push API to Local Registry ') {
    
           dir("${gradleFilePath}") {
              
         sh '''
        
        docker push 192.168.1.225:50000/'''+finalImageName+''':'''+tag+'''
        
         '''
          }
    }
    
      stage('Push Image to AWS ECR'){
	sh "docker tag 192.168.1.225:50000/${finalImageName}:${tag} 105761683210.dkr.ecr.ap-south-1.amazonaws.com/aws-local-connect-repo:${finalImageName}_${tag} 2>/dev/null || true "
	getLoginKey = sh(returnStdout: true, script: "su ekaconnect -c 'aws ecr get-login --no-include-email --region ap-south-1'").trim()
	sh "su ekaconnect -c 'eval $getLoginKey' 2>/dev/null || true"
	sh "su ekaconnect  -c 'docker push 105761683210.dkr.ecr.ap-south-1.amazonaws.com/aws-local-connect-repo:${finalImageName}_${tag}'"
	sh  "docker image rm -f 105761683210.dkr.ecr.ap-south-1.amazonaws.com/aws-local-connect-repo:${finalImageName}_${tag} 192.168.1.225:50000/${finalImageName}:${tag} 2>/dev/null || true" 
  }
  

    stage('Deploy API') {
    	echo "remove container with name -> ${imageName}-${BranchName} if exists"
	 sh   "docker rm  -f ${imageName}-${BranchName} 2>/dev/null || true "
          sh "docker pull 192.168.1.225:50000/${finalImageName}:${tag}"
          sh "docker run -d -p ${port}:8080 --name ${imageName}-${BranchName} --env-file ${envFile} --network bridge 192.168.1.225:50000/${finalImageName}:${tag}"

    }
}
